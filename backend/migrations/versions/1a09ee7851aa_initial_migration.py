"""initial migration

Revision ID: 1a09ee7851aa
Revises: 
Create Date: 2024-12-13 03:14:48.204074

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '1a09ee7851aa'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('assistants_practitioners')
    op.drop_table('practitioners_assistants')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('username',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               existing_nullable=False)
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=120),
               nullable=False)
        batch_op.alter_column('phone',
               existing_type=sa.VARCHAR(length=15),
               type_=sa.String(length=20),
               existing_nullable=True)
        batch_op.create_unique_constraint(None, ['email'])
        batch_op.create_unique_constraint(None, ['username'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('phone',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=15),
               existing_nullable=True)
        batch_op.alter_column('email',
               existing_type=sa.String(length=120),
               type_=sa.VARCHAR(length=255),
               nullable=True)
        batch_op.alter_column('username',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)

    op.create_table('practitioners_assistants',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('practitioner_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('assistant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assistant_id'], ['users.id'], name='practitioners_assistants_assistant_id_fkey'),
    sa.ForeignKeyConstraint(['practitioner_id'], ['practitioners.id'], name='practitioners_assistants_practitioner_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='practitioners_assistants_pkey'),
    sa.UniqueConstraint('practitioner_id', 'assistant_id', name='practitioners_assistants_practitioner_id_assistant_id_key')
    )
    op.create_table('assistants_practitioners',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('assistant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('practitioner_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assistant_id'], ['users.id'], name='assistants_practitioners_assistant_id_fkey'),
    sa.ForeignKeyConstraint(['practitioner_id'], ['practitioners.id'], name='assistants_practitioners_practitioner_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='assistants_practitioners_pkey'),
    sa.UniqueConstraint('assistant_id', 'practitioner_id', name='assistants_practitioners_assistant_id_practitioner_id_key')
    )
    # ### end Alembic commands ###
